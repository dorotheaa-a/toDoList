services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    env_file: .env  
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U noteuser -d notedb"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    # REMOVE TO MAKE DB EPHEMEREAL â†“
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Django Backend
  django:
    build:
      context: ./backend-django
      dockerfile: Dockerfile.prod
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy

  # Express Backend
  express:
    build:
      context: ./backend-express
      dockerfile: Dockerfile.prod
    environment:
      - DB_HOST=db
      - DB_USER=noteuser
      - DB_PASSWORD=notepass
      - DB_NAME=notedb
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy

  # Golang Middleware
  middleware:
    build:
      context: ./middleware
      dockerfile: Dockerfile.prod
    ports:
      - "8080:8080"
    depends_on:
      - django
      - express

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
    depends_on:
      - middleware

volumes:
  postgres_data: