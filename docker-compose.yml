version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    env_file: .env  
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U noteuser -d notedb"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # MongoDB for Express backend
  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  # Django Backend (PostgreSQL-based)
  django:
    build:
      context: ./backend_django
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend_django:/app

  # Express Backend (MongoDB-based)
  express:
    build:
      context: ./backend-express
      dockerfile: Dockerfile
    container_name: express
    env_file:
      - ./backend-express/.env
    ports:
      - "3001:3001"
    depends_on:
      - mongo
    volumes:
      - ./backend-express:/app

  # Golang Middleware (BFF)
  middleware:
    build:
      context: ./go_middleware 
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3002:3001"
    env_file:
      - .env.go_middleware
    depends_on:
      - django
    volumes:
      - ./go_middleware:/app

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    restart: unless-stopped
    depends_on:
      - middleware
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  mongo_data:
